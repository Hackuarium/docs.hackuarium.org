"use strict";(self.webpackChunkdocs_hackuarium_org=self.webpackChunkdocs_hackuarium_org||[]).push([[56],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=c(r),d=o,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||i;return r?n.createElement(m,a(a({ref:t},s),{},{components:r})):n.createElement(m,a({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},601:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],u={},l="List of qualifiers",c={unversionedId:"bioreactor/using/qualifiers",id:"bioreactor/using/qualifiers",isDocsHomePage:!1,title:"List of qualifiers",description:"Each device has an identifier that allows to recognize it's kind and should be unique.",source:"@site/docs/20_bioreactor/30_using/40_qualifiers.md",sourceDirName:"20_bioreactor/30_using",slug:"/bioreactor/using/qualifiers",permalink:"/docs/bioreactor/using/qualifiers",editUrl:"https://github.com/hackuarium/docs.hackuarium.org/edit/main/docs/20_bioreactor/30_using/40_qualifiers.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Frequently asked question (FAQ)",permalink:"/docs/bioreactor/using/faq"},next:{title:"Incubator",permalink:"/docs/incubator"}},s=[],p={toc:s};function f(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"list-of-qualifiers"},"List of qualifiers"),(0,i.kt)("p",null,"Each device has an identifier that allows to recognize it's kind and should be unique."),(0,i.kt)("p",null,"A qualifier is composed of 2 bytes and therefore a number from 0 to 65535."),(0,i.kt)("p",null,"It can be set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"uq")," command."),(0,i.kt)("p",null,"You can also display this number as 2 bytes and therefore as 2 ASCII code."),(0,i.kt)("p",null,"In the case of the bioreactor the first ASCII code is ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),"."),(0,i.kt)("p",null,"You may for example give the following code to the bioreactor"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"$A = 9281 = 0x2441"),(0,i.kt)("li",{parentName:"ul"},"$B = 9282 = 0x2442"),(0,i.kt)("li",{parentName:"ul"},"$C = 9283 = 0x2443"),(0,i.kt)("li",{parentName:"ul"},"$D = 9284 = 0x2444"),(0,i.kt)("li",{parentName:"ul"},"$E = 9285 = 0x2445"),(0,i.kt)("li",{parentName:"ul"},"...")),(0,i.kt)("p",null,"Each code will correspond to a database name so that is really needs to be unique !"),(0,i.kt)("p",null,"You may convert from the 2 letters code to a number using the following javascript code (you may use it in the browser console."),(0,i.kt)("p",null,"'$'.charCodeAt(0)*256+'A'.charCodeAt(0)"),(0,i.kt)("p",null,"In the logs this ID will appear as hexa decimal code. You may convert from deciaml to hexadecimal in javascript using the following code:"),(0,i.kt)("p",null,"Number(9281).toString(16)"))}f.isMDXComponent=!0}}]);